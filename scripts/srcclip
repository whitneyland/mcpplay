#!/usr/bin/env zsh
# Combines Swift source files, strips comments, and copies to clipboard

set -euo pipefail

# Find the Git project root
PROJECT_ROOT=$(git -C "$PWD" rev-parse --show-toplevel 2>/dev/null)
if [[ -z "$PROJECT_ROOT" ]]; then
  echo "❌ Not inside a Git repo. Aborting."
  exit 1
fi

cd "$PROJECT_ROOT"
echo "📁 Using project root: $PROJECT_ROOT"

# Configuration
OUT_DIR="build"
OUT_FILE="$OUT_DIR/combined.swift"

# Create output directory
mkdir -p "$OUT_DIR"

echo "🔍 Finding Swift files..."

# Find and combine Swift files, strip comments
{
    find . -type f -name '*.swift' \
        -not -path '*/Pods/*' \
        -not -path '*/Carthage/*' \
        -not -path '*/DerivedData/*' \
        -not -path '*/build/*' \
        -not -path '*/.build/*' \
        -print0 \
    | sort -z \
    | while IFS= read -r -d '' file; do
        echo "// $file"
        cat "$file" | sed -E '
            # Remove single-line comments
            s@//.*$@@

            # Remove multi-line comments
            :a
            /\/\*/ {
                /\*\//! {
                    N
                    ba
                }
                s@/\*.*\*/@@
            }
        ' | awk '
            /^[[:space:]]*$/ { next }
            { print }
        '
        echo ""
    done
} > "$OUT_FILE"

LINE_COUNT=$(wc -l < "$OUT_FILE")
FILE_COUNT=$(find . -type f -name '*.swift' \
    -not -path '*/Pods/*' \
    -not -path '*/Carthage/*' \
    -not -path '*/DerivedData/*' \
    -not -path '*/build/*' \
    -not -path '*/.build/*' \
    | wc -l)

echo "✅ Combined $FILE_COUNT Swift files"
echo "📄 Wrote $LINE_COUNT lines to $OUT_FILE"

# Copy to clipboard
if command -v pbcopy >/dev/null 2>&1; then
    cat "$OUT_FILE" | pbcopy
    echo "📋 Copied to clipboard"
elif command -v xclip >/dev/null 2>&1; then
    cat "$OUT_FILE" | xclip -selection clipboard
    echo "📋 Copied to clipboard"
else
    echo "⚠️  Clipboard utility not found (pbcopy/xclip)"
fi

echo "🎉 Done!"